package exercise;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Strings {

    // http://www.alansofficespace.com/unicode/unicd99.htm
    private static final int EXTENDED_ASCII_CODES = 256; // can be increased to 65535

    private Strings() {
        throw new AssertionError("Cannot be instantiated");
    }
    // –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–∫–æ–≥–¥–∞ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∏–ª–∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–∏–º–≤–æ–ª ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π) –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n¬≤)
    public static char firstNonRepeatedCharacterV1(String str) {

        if (str == null || str.isBlank()) {
            // or throw IllegalArgumentException
            return Character.MIN_VALUE;
        }

        for (int i = 0; i < str.length(); i++) {

            char ch = str.charAt(i);

            int count = 0;
            for (int j = 0; j < str.length(); j++) {
                if (ch == str.charAt(j) && i != j) {
                    count++;
                    break;
                }
            }

            if (count == 0) {
                return ch;
            }
        }

        return Character.MIN_VALUE;
    }
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å O(n) –≤–º–µ—Å—Ç–æ O(n¬≤), —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤.
    public static char firstNonRepeatedCharacterV2(String str) {

        if (str == null || str.isBlank()) {
            // or throw IllegalArgumentException
            return Character.MIN_VALUE;
        }

        int[] flags = new int[EXTENDED_ASCII_CODES];

        for(int i = 0; i < flags.length; i++) {
            flags[i] = -1;
        }

        for (int i = 0; i < str.length(); i++) {

            char ch = str.charAt(i);
            if (flags[ch] == -1) {
                flags[ch] = i;
            } else {
                flags[ch] = -2;
            }
        }

        int position = Integer.MAX_VALUE;
        for (int i = 0; i < EXTENDED_ASCII_CODES; i++) {
            if (flags[i] >= 0) {
                position = Math.min(position, flags[i]);
            }
        }

        return position == Integer.MAX_VALUE ? Character.MIN_VALUE : str.charAt(position);
    }

    // –í—Ä–µ–º—è: O(n) (–¥–≤–∞ –ø—Ä–æ—Ö–æ–¥–∞: –æ–¥–∏–Ω –ø–æ —Å—Ç—Ä–æ–∫–µ, –≤—Ç–æ—Ä–æ–π –ø–æ Map), –ü–∞–º—è—Ç—å: O(n) (—Ö—Ä–∞–Ω–µ–Ω–∏–µ Map —Å —Å–∏–º–≤–æ–ª–∞–º–∏).
    public static char firstNonRepeatedCharacterV3(String str) {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ V1 –∏ V2, –µ—Å–ª–∏: —Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç Unicode-—Å–∏–º–≤–æ–ª—ã (–Ω–µ —Ç–æ–ª—å–∫–æ ASCII),
    // –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (–ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
        if (str == null || str.isBlank()) {
            // or throw IllegalArgumentException
            return Character.MIN_VALUE;
        }
        // –•—Ä–∞–Ω–∏—Ç —Å–∏–º–≤–æ–ª—ã (Character) –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        Map<Character, Integer> chars = new LinkedHashMap<>();

        // or use for(char ch: str.toCharArray()) { ... }
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            // –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Map –¥–ª—è —Å–∏–º–≤–æ–ª–∞ ch
            chars.compute(ch, (k, v) -> (v == null) ? 1 : ++v);
        }
        // –ü—Ä–æ—Ö–æ–¥ –ø–æ LinkedHashMap (–≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤!).
        for (Map.Entry<Character, Integer> entry: chars.entrySet()) {
            // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ (entry.getValue()) —Ä–∞–≤–Ω–æ 1 ‚Üí –∑–Ω–∞—á–∏—Ç, —Å–∏–º–≤–æ–ª –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.
            if (entry.getValue() == 1) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–∫–æ–π —Å–∏–º–≤–æ–ª
                return entry.getKey();
            }
        }

        return Character.MIN_VALUE;
    }
    // –í—Ä–µ–º—è: O(n) (–æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ + –æ–¥–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞). –ü–∞–º—è—Ç—å: O(n) (—Ö—Ä–∞–Ω–µ–Ω–∏–µ Map).
    public static char firstNonRepeatedCharacterV4(String str) {
        if (str == null || str.isBlank()) {
            // or throw IllegalArgumentException
            return Character.MIN_VALUE;
        }
        // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ IntStream –∫–æ–¥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ Unicode (–∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª ‚Üí int).
        Map<Integer, Long> chs = str.chars()
                // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç IntStream –≤ Stream<Integer> (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Collectors.groupingBy).
                .mapToObj(cp -> cp)
                //  –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã: –∫–ª—é—á–æ–º –≤ Map –±—É–¥–µ—Ç —Å–∞–º —Å–∏–º–≤–æ–ª (–∫–æ–¥–æ–≤–∞—è —Ç–æ—á–∫–∞).
                .collect(Collectors.groupingBy(Function.identity(),
        // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤, –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Map - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–∞ (Long).
                        LinkedHashMap::new, Collectors.counting()));
        // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Map –≤ –ø–æ—Ç–æ–∫ –ø–∞—Ä (—Å–∏–º–≤–æ–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Integer (–∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É) –≤ char.
        return (char) (int) chs.entrySet().stream()
                // –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Å —á–∞—Å—Ç–æ—Ç–æ–π 1.
                .filter(e -> e.getValue() == 1L)
                //  –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —Ç–∞–∫–æ–π —Å–∏–º–≤–æ–ª (–±–ª–∞–≥–æ–¥–∞—Ä—è LinkedHashMap –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω).
                .findFirst()
                // –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á (–∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É —Å–∏–º–≤–æ–ª–∞).
                .map(Map.Entry::getKey)
                // –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Character.MIN_VALUE.
                .orElse(Integer.valueOf(Character.MIN_VALUE));
    }
    // –í—Ä–µ–º—è: O(n) (–¥–≤–∞ –ø—Ä–æ—Ö–æ–¥–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã + –ø–æ–∏—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ). –ü–∞–º—è—Ç—å: O(n) (—Ö—Ä–∞–Ω–µ–Ω–∏–µ LinkedHashMap).
    public static String firstNonRepeatedCharacterV5(String str) {

        if (str == null || str.isBlank()) {
            // or throw IllegalArgumentException
            return String.valueOf(Character.MIN_VALUE);
        }
// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –ø–æ—Ç–æ–∫ –∫–æ–¥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ Unicode (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ BMP, –Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–º–æ–¥–∑–∏ üöÄ)
        Map<Integer, Long> chs = str.codePoints()
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç IntStream –≤ Stream<Integer> –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
                .mapToObj(cp -> cp)
                .collect(Collectors.groupingBy(Function.identity(),
                        // –°–æ–∑–¥–∞–µ—Ç LinkedHashMap, –≥–¥–µ: –ö–ª—é—á (Integer) ‚Äî –∫–æ–¥–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å–∏–º–≤–æ–ª–∞.
                                                     //–ó–Ω–∞—á–µ–Ω–∏–µ (Long) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π.
                        //LinkedHashMap —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤.
                        LinkedHashMap::new, Collectors.counting()));

        int cp = chs.entrySet().stream()
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å —á–∞—Å—Ç–æ—Ç–æ–π 1.
                .filter(e -> e.getValue() == 1L)
                // –±–µ—Ä—ë—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏–º–≤–æ–ª (–±–ª–∞–≥–æ–¥–∞—Ä—è LinkedHashMap –ø–æ—Ä—è–¥–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω).
                .findFirst()
                .map(Map.Entry::getKey)
                // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Character.MIN_VALUE, –µ—Å–ª–∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Ç.
                .orElse(Integer.valueOf(Character.MIN_VALUE));
// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É Unicode –≤ –º–∞—Å—Å–∏–≤ char[] (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç surrogate pairs, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —ç–º–æ–¥–∑–∏)
        return String.valueOf(Character.toChars(cp));
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç char[] –≤ —Å—Ç—Ä–æ–∫—É.
    }
}
