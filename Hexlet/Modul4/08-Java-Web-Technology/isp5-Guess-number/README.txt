В этом упражнении вам предстоит разработать веб-приложение, игру, в которой пользователь должен угадать
загаданное компьютером число от 1 до 100

Игра проходит следующим образом:

Компьютер загадывает случайное число от 1 до 100 и предлагает игроку угадать загаданное число
Пользователь вводит свое предположение о числе.
Игра проверяет, является ли введенное число правильным или нет. Если число правильное, игра заканчивается и
пользователь выигрывает. Если число неправильное, компьютер дает подсказку, загаданное число больше или
меньше предложенного пользователем. Игра продолжается и пользователь может сделать еще одну попытку.
Количество попыток в игре ограничено

src/main/java/exercise/App.java
Посмотрите, какие маршруты обслуживает наше приложение. Вам предстоит создать обработчики для этих маршрутов

src/main/java/exercise/controller/UsersController.java
В этом упражнении шаблоны уже написаны, чтобы вам не пришлось работать с фронтовой частью приложения.
Можете использовать их по своему усмотрению

Напишите обработчики для работы игры:

При запросе GET / должна возвращаться начальная страница игры с описанием правил и предложением выбрать
сложность игры. Сложность регулируется количеством попыток. Считаем, что высокий уровень сложности это
5 попыток, средний — 8 и легкий — 12.

POST запрос на адрес /start запускает игру с заданной сложностью. В этот момент компьютер загадывает число
и предлагает пользователю отгадать его. Сложность передается в теле запроса в виде количества попыток как
параметр формы attempts

Пример запроса

http POST localhost:8080/start attempts=8
Чтобы ответить, пользователь отправляет POST запрос на адрес /guess — это его попытка отгадать число. Число отправляется в теле запроса как параметр формы usersAnswer

Пример запроса:

http POST localhost:8080/guess usersAnswer=55
Дальше возможны три варианта развития событий:

Если пользователь угадал, компьютер выводит сообщение с поздравлением. Игра завершается

Если пользователь не угадал и у него еще не закончились попытки, компьютер выводит подсказку
(загаданное число больше или меньше предложенного пользователем) и предлагает попробовать снова.
Пользователь делает новый POST запрос на адрес /guess уже с другим числом, и так далее, пока не угадает или
попытки не закончатся

Если пользователь не угадал и это была последняя попытка, то компьютер выводит сообщение, что попытки закончились.
Игра завершается

POST запрос на адрес /reset перезапускает игру, то есть сбрасывает загаданное число, максимальное и
текущее количество попыток

Запуск игры
Чтобы запустить приложение, соберите его командой make compile в терминале. После окончания сборки откройте
веб доступ и перейдите на страницу /users.

В упражнении организована автоматическая перезагрузка сервера при внесении изменений в файлы классов.
Чтобы подтянуть сделанные изменения, соберите приложение командой make compile и перезагрузите страницу веб доступа

Подсказки
При создании этой игры вам нужно сохранять состояние игры между запросами — это и загаданное число и
максимальное количество попыток и текущая попытка. Однако, HTTP-протокол является протоколом без состояния,
то есть каждый запрос считается отдельным и не сохраняет информацию о предыдущих запросах. Порассуждайте,
какой механизм можно использовать, чтобы сохранить состояние игры между запросами
Загляните в dto нашего приложения, класс GuestPage. Это поможет разобраться, какие данные ждет шаблон на вход