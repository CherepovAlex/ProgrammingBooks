В этой практике необходимо реализовать систему аутентификации. В нашем случае она состоит из таких
маршрутов:
GET /sessions/build — форма логина, в которой пользователь вводит имя и пароль
POST /sessions для создания сессии
POST /sessions/delete для удаления сессии
После выполнения каждого из этих действий происходит редирект на главную страницу.

src/main/java/io/hexlet/controller/SessionsController.java
Реализуйте обработчики для указанных выше маршрутов. Для работы с пользователями используйте
репозиторий UsersRepository.

Список пользователей с именами и паролями можно посмотреть в классе Generator. Обратите внимание,
что пароль хранится в зашифрованном виде. Это значит, что при сравнении необходимо шифровать пароль
от пользователя и сравнивать хеши.

Если имя или пароль неверные, то снова отрисовывается форма логина и показывается сообщение
Wrong username or password.

src/main/java/io/hexlet/App.java
Опишите роутинг для указанных выше обработчиков. Используйте именованные маршруты.

В этом задании имена маршрутов уже описаны в классе NamedRoutes.

src/main/jte/index.jte
Реализуйте шаблон главной страницы:

Если пользователь не аутентифицирован, то ему показывается ссылка на страницу логина с текстом Войти
Если аутентифицирован, то его имя и форма с кнопкой Выйти
Запуск приложения
Запустите приложение и попробуйте внести изменения в макет сайта. Убедитесь, что они отражаются
на всех страницах сайта.

Чтобы запустить приложение, соберите его командой make compile в терминале. После окончания сборки
откройте веб доступ

В упражнении организована автоматическая перезагрузка сервера при внесении изменений в файлы классов.
 Чтобы подтянуть сделанные изменения, соберите приложение командой make compile и перезагрузите
 страницу веб доступа

Подсказки
Если тесты работают слишком долго, запустите предварительно компиляцию при помощи команды make compile
