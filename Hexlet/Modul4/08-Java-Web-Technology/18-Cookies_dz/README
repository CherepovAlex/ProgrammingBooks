Один из вариантов использования куки — хранение токена для аутентификации. В этом упражнении мы упрощенно реализуем такой механизм.

src/main/java/exercise/controller/UsersController.java
Реализуйте два обработчика:

Обработчик POST /users для регистрации пользователя. Он должен принимать данные формы и устанавливать специальный токен в куке.
Для генерации токена используйте метод Security.generateToken(). Пользователь должен сохраняться в репозитории.
Затем должен происходить редирект на /users/{id}, где {id} — это id зарегистрированного пользователя
Обработчик GET /users/{id}. Он должен отображать данные пользователя на странице, но только в том случае, если токен пользователя
в куке совпадает с токеном пользователя, id которого указан в адресе. Для поиска пользователя используйте метод find() из класса репозитория.
Затем обработчик должен отрисовывать шаблон users/show.jte с данными пользователя. Если пользователь не совпадает по токену,
должен происходить редирект на /users/buildsrc/main/java/exercise/App.java
Добавьте в приложение роутинг для этих маршрутов.

Подсказки
Перед началом работы загляните в шаблоны users/build.jte и users/show.jte
Запуск приложения
Запустите приложение и попробуйте внести изменения в макет сайта. Убедитесь, что они отражаются на всех страницах сайта.

Чтобы запустить приложение, соберите его командой make compile в терминале. После окончания сборки откройте веб доступ

В упражнении организована автоматическая перезагрузка сервера при внесении изменений в файлы классов. Чтобы подтянуть
сделанные изменения, соберите приложение командой make compile и перезагрузите страницу веб доступа

Подсказки
Если тесты работают слишком долго, запустите предварительно компиляцию при помощи команды make compile
Ориентируйтесь на методы для добавления нового поста
В шаблоне с формой редактирования поста используйте идентификатор поста, чтобы сформировать ссылку